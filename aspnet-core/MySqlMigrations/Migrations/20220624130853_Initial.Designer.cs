// <auto-generated />
using System;
using EfRepositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MySqlMigrations.Migrations
{
    [DbContext(typeof(TgDriveContext))]
    [Migration("20220624130853_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EfRepositories.Entities.DirectoryAccess", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("DirectoryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasReadAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasWriteAccess")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserId", "DirectoryId");

                    b.HasIndex("DirectoryId");

                    b.ToTable("DirectoriesAccesses");
                });

            modelBuilder.Entity("EfRepositories.Entities.DirectoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReadAccessKey")
                        .HasColumnType("longtext");

                    b.Property<string>("WriteAccessKey")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Directories");
                });

            modelBuilder.Entity("EfRepositories.Entities.FileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AddedByUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<long>("DirectoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReadAccessKey")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("EfRepositories.Entities.UserInfoEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("StorageChannelId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EfRepositories.Entities.DirectoryAccess", b =>
                {
                    b.HasOne("EfRepositories.Entities.DirectoryEntity", "Directory")
                        .WithMany("Accesses")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directory");
                });

            modelBuilder.Entity("EfRepositories.Entities.DirectoryEntity", b =>
                {
                    b.HasOne("EfRepositories.Entities.DirectoryEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EfRepositories.Entities.FileEntity", b =>
                {
                    b.HasOne("EfRepositories.Entities.DirectoryEntity", "Directory")
                        .WithMany("Files")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directory");
                });

            modelBuilder.Entity("EfRepositories.Entities.DirectoryEntity", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("Children");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
